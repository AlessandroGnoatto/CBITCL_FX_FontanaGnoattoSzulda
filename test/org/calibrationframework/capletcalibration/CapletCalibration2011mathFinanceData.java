package org.calibrationframework.capletcalibration;

import java.time.LocalDate;
import java.util.*;
import java.util.function.*;

import org.calibrationframework.fouriermethod.calibration.*;
import org.calibrationframework.fouriermethod.calibration.constraints.BoundConstraint;
import org.calibrationframework.fouriermethod.calibration.constraints.PositivityConstraint;
import org.calibrationframework.fouriermethod.calibration.constraints.ScalarParameterInformation;
import org.calibrationframework.fouriermethod.calibration.constraints.ScalarParameterInformationInterface;
import org.calibrationframework.fouriermethod.calibration.models.*;
import org.calibrationframework.fouriermethod.products.*;

import net.finmath.marketdata.model.*;
import net.finmath.marketdata.model.curves.*;
import net.finmath.marketdata.model.curves.CurveInterpolation.*;

import org.calibrationframework.marketdata.model.volatilities.*;
import org.calibrationframework.marketdata.model.volatilities.VolatilitySurfaceInterface.QuotingConvention;
import org.calibrationframework.optimizer.*;
import org.calibrationframework.stochastic.*;

public class CapletCalibration2011mathFinanceData {
	public static void main(String[] args) throws SolverException, CloneNotSupportedException {
		
		/*
		 * Calibration of a single curve - OIS curve - self disocunted curve, from a set of calibration products.
		 */
		LocalDate referenceDate = LocalDate.of(2018,9,24);

		/*
		 * Define the calibration spec generators for our calibration products
		 */
		Function<String,String> frequencyForTenor = (tenor) -> {
			switch(tenor) {
			case "3M":
				return "quarterly";
			case "6M":
				return "semiannual";
			}
			throw new IllegalArgumentException("Unkown tenor " + tenor);
		};
	
		double[] timePoints = {0.000,0.125,0.250,0.375,0.500,0.625,0.750,0.875,1.000,1.125,1.250,1.375,1.500,1.625,1.750,1.875,2.000,2.125,2.250,2.375,2.500,2.625,2.750,2.875,3.000,3.125,3.250,3.375,3.500,3.625,3.750,3.875,4.000,4.125,4.250,4.375,4.500,4.625,4.750,4.875,5.000,5.125,5.250,5.375,5.500,5.625,5.750,5.875,6.000,6.125,6.250,6.375,6.500,6.625,6.750,6.875,7.000,7.125,7.250,7.375,7.500,7.625,7.750,7.875,8.000,8.125,8.250,8.375,8.500,8.625,8.750,8.875,9.000,9.125,9.250,9.375,9.500,9.625,9.750,9.875,10.000,10.125,10.250,10.375,10.500,10.625,10.750,10.875,11.000,11.125,11.250,11.375,11.500,11.625,11.750,11.875,12.000,12.125,12.250,12.375,12.500,12.625,12.750,12.875,13.000,13.125,13.250,13.375,13.500,13.625,13.750,13.875,14.000,14.125,14.250,14.375,14.500,14.625,14.750,14.875,15.000,15.125,15.250,15.375,15.500,15.625,15.750,15.875,16.000,16.125,16.250,16.375,16.500,16.625,16.750,16.875,17.000,17.125,17.250,17.375,17.500,17.625,17.750,17.875,18.000,18.125,18.250,18.375,18.500,18.625,18.750,18.875,19.000,19.125,19.250,19.375,19.500,19.625,19.750,19.875,20.000,20.125,20.250,20.375,20.500,20.625,20.750,20.875,21.000,21.125,21.250,21.375,21.500,21.625,21.750,21.875,22.000,22.125,22.250,22.375,22.500,22.625,22.750,22.875,23.000,23.125,23.250,23.375,23.500,23.625,23.750,23.875,24.000,24.125,24.250,24.375,24.500,24.625,24.750,24.875,25.000,25.125,25.250,25.375,25.500,25.625,25.750,25.875,26.000,26.125,26.250,26.375,26.500,26.625,26.750,26.875,27.000,27.125,27.250,27.375,27.500,27.625,27.750,27.875,28.000,28.125,28.250,28.375,28.500,28.625,28.750,28.875,29.000,29.125,29.250,29.375,29.500,29.625,29.750,29.875,30.000,30.125,30.250,30.375,30.500,30.625,30.750,30.875,31.000,31.125,31.250,31.375,31.500,31.625,31.750,31.875,32.000,32.125,32.250,32.375,32.500,32.625,32.750,32.875,33.000,33.125,33.250,33.375,33.500,33.625,33.750,33.875,34.000,34.125,34.250,34.375,34.500,34.625,34.750,34.875,35.000,35.125,35.250,35.375,35.500,35.625,35.750,35.875,36.000,36.125,36.250,36.375,36.500,36.625,36.750,36.875,37.000,37.125,37.250,37.375,37.500,37.625,37.750,37.875,38.000,38.125,38.250,38.375,38.500,38.625,38.750,38.875,39.000,39.125,39.250,39.375,39.500,39.625,39.750,39.875,40.000};
		double[] givenDiscountFactors = {1.0000000,0.9984681,0.9969386,0.9954115,0.9938866,0.9923641,0.9908440,0.9893261,0.9878106,0.9862300,0.9846353,0.9830279,0.9814078,0.9797753,0.9781302,0.9764727,0.9748029,0.9728240,0.9707922,0.9687139,0.9665897,0.9644197,0.9622044,0.9599439,0.9576388,0.9550630,0.9524098,0.9496950,0.9469194,0.9440833,0.9411875,0.9382325,0.9352190,0.9321405,0.9290040,0.9258105,0.9225606,0.9192549,0.9158943,0.9124793,0.9090107,0.9056184,0.9021851,0.8987058,0.8951810,0.8916115,0.8879979,0.8843407,0.8806408,0.8770726,0.8734765,0.8698455,0.8661799,0.8624804,0.8587475,0.8549817,0.8511838,0.8475291,0.8438560,0.8401571,0.8364329,0.8326838,0.8289102,0.8251128,0.8212920,0.8176373,0.8139731,0.8102910,0.8065914,0.8028749,0.7991417,0.7953923,0.7916270,0.7879178,0.7842017,0.7804724,0.7767300,0.7729751,0.7692079,0.7654288,0.7616381,0.7579314,0.7542220,0.7505036,0.7467765,0.7430410,0.7392974,0.7355460,0.7317872,0.7281102,0.7244337,0.7207518,0.7170648,0.7133729,0.7096765,0.7059757,0.7022708,0.6988877,0.6955275,0.6921675,0.6888080,0.6854490,0.6820907,0.6787332,0.6753768,0.6720215,0.6686675,0.6653150,0.6619640,0.6586148,0.6552675,0.6519222,0.6485791,0.6452383,0.6419000,0.6385642,0.6352312,0.6319011,0.6285740,0.6252500,0.6219293,0.6192299,0.6166145,0.6140075,0.6114087,0.6088183,0.6062361,0.6036622,0.6010965,0.5985391,0.5959899,0.5934489,0.5909161,0.5883915,0.5858751,0.5833669,0.5808668,0.5783748,0.5758910,0.5734153,0.5709477,0.5684882,0.5660367,0.5635933,0.5611580,0.5587307,0.5563114,0.5539001,0.5514969,0.5491016,0.5467143,0.5443349,0.5419635,0.5396000,0.5372444,0.5348968,0.5325570,0.5302251,0.5279010,0.5255848,0.5232765,0.5213513,0.5195039,0.5176661,0.5158380,0.5140196,0.5122106,0.5104112,0.5086211,0.5068405,0.5050692,0.5033071,0.5015543,0.4998106,0.4980761,0.4963506,0.4946341,0.4929265,0.4912279,0.4895381,0.4878571,0.4861849,0.4845213,0.4828664,0.4812201,0.4795823,0.4779531,0.4763323,0.4747199,0.4731158,0.4715200,0.4699326,0.4683533,0.4667822,0.4652191,0.4636642,0.4621173,0.4605784,0.4590474,0.4575243,0.4560090,0.4545231,0.4530503,0.4515853,0.4501281,0.4486786,0.4472368,0.4458026,0.4443759,0.4429568,0.4415452,0.4401410,0.4387443,0.4373549,0.4359728,0.4345981,0.4332305,0.4318702,0.4305170,0.4291709,0.4278319,0.4265000,0.4251750,0.4238571,0.4225460,0.4212418,0.4199444,0.4186539,0.4173701,0.4160931,0.4148227,0.4135590,0.4123019,0.4110514,0.4098074,0.4085699,0.4073389,0.4061144,0.4048962,0.4036844,0.4024789,0.4010108,0.3994914,0.3979778,0.3964698,0.3949676,0.3934710,0.3919801,0.3904949,0.3890152,0.3875411,0.3860726,0.3846097,0.3831523,0.3817003,0.3802539,0.3788130,0.3773775,0.3759474,0.3745227,0.3731034,0.3716895,0.3702809,0.3688776,0.3674797,0.3660870,0.3646996,0.3633174,0.3619405,0.3605687,0.3592022,0.3578408,0.3564846,0.3551335,0.3537875,0.3524465,0.3511107,0.3497799,0.3484541,0.3471334,0.3458176,0.3445068,0.3432010,0.3419001,0.3406041,0.3393131,0.3380269,0.3367455,0.3354690,0.3341974,0.3329305,0.3316685,0.3304112,0.3291586,0.3279108,0.3266677,0.3254294,0.3241957,0.3229666,0.3217422,0.3205225,0.3193073,0.3180968,0.3168908,0.3156894,0.3144925,0.3133001,0.3121123,0.3109290,0.3097501,0.3085757,0.3074057,0.3062402,0.3050790,0.3039223,0.3027699,0.3016219,0.3004782,0.2993389,0.2982038,0.2970731}; 
		InterpolationMethod interpolationMethod = InterpolationMethod.CUBIC_SPLINE;
		ExtrapolationMethod extrapolationMethod = ExtrapolationMethod.CONSTANT;
		InterpolationEntity interpolationEntity = InterpolationEntity.LOG_OF_VALUE;
		
		DiscountCurve discountEUROIS = DiscountCurveInterpolation.createDiscountCurveFromDiscountFactors("discount-EUR-OIS", timePoints, givenDiscountFactors,interpolationMethod,extrapolationMethod,interpolationEntity);
		
		double[] timePoints3M = {0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,1.35,1.4,1.45,1.5,1.55,1.6,1.65,1.7,1.75,1.8,1.85,1.9,1.95,2,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5,2.55,2.6,2.65,2.7,2.75,2.8,2.85,2.9,2.95,3,3.05,3.1,3.15,3.2,3.25,3.3,3.35,3.4,3.45,3.5,3.55,3.6,3.64999999999999,3.69999999999999,3.74999999999999,3.79999999999999,3.84999999999999,3.89999999999999,3.94999999999999,3.99999999999999,4.04999999999999,4.09999999999999,4.14999999999999,4.19999999999999,4.24999999999999,4.29999999999999,4.34999999999999,4.39999999999999,4.44999999999999,4.49999999999999,4.54999999999999,4.59999999999999,4.64999999999999,4.69999999999999,4.74999999999999,4.79999999999999,4.84999999999999,4.89999999999999,4.94999999999999,4.99999999999999,5.04999999999999,5.09999999999999,5.14999999999999,5.19999999999999,5.24999999999999,5.29999999999999,5.34999999999999,5.39999999999999,5.44999999999999,5.49999999999999,5.54999999999999,5.59999999999999,5.64999999999999,5.69999999999999,5.74999999999999,5.79999999999999,5.84999999999999,5.89999999999999,5.94999999999999,5.99999999999999,6.04999999999999,6.09999999999999,6.14999999999999,6.19999999999999,6.24999999999999,6.29999999999999,6.34999999999999,6.39999999999999,6.44999999999999,6.49999999999999,6.54999999999999,6.59999999999998,6.64999999999998,6.69999999999998,6.74999999999998,6.79999999999998,6.84999999999998,6.89999999999998,6.94999999999998,6.99999999999998,7.04999999999998,7.09999999999998,7.14999999999998,7.19999999999998,7.24999999999998,7.29999999999998,7.34999999999998,7.39999999999998,7.44999999999998,7.49999999999998,7.54999999999998,7.59999999999998,7.64999999999998,7.69999999999998,7.74999999999998,7.79999999999998,7.84999999999998,7.89999999999998,7.94999999999998,7.99999999999998,8.04999999999998,8.09999999999998,8.14999999999998,8.19999999999998,8.24999999999998,8.29999999999998,8.34999999999998,8.39999999999998,8.44999999999999,8.49999999999999,8.54999999999999,8.59999999999999,8.64999999999999,8.69999999999999,8.74999999999999,8.79999999999999,8.84999999999999,8.89999999999999,8.94999999999999,9,9.04999999999999,9.09999999999999,9.15,9.2,9.25,9.3,9.35,9.4,9.45,9.5,9.55,9.6,9.65,9.7,9.75,9.8,9.85000000000001,9.90000000000001,9.95000000000001,10,10.05,10.1,10.15,10.2,10.25,10.3,10.35,10.4,10.45,10.5,10.55,10.6,10.65,10.7,10.75,10.8,10.85,10.9,10.95,11,11.05,11.1,11.15,11.2,11.25,11.3,11.35,11.4,11.45,11.5,11.55,11.6,11.65,11.7,11.75,11.8,11.85,11.9,11.95,12,12.05,12.1,12.15,12.2,12.25,12.3,12.35,12.4,12.45,12.5,12.55,12.6,12.65,12.7,12.75,12.8,12.85,12.9000000000001,12.95,13.0000000000001,13.0500000000001,13.1000000000001,13.1500000000001,13.2000000000001,13.2500000000001,13.3000000000001,13.3500000000001,13.4000000000001,13.4500000000001,13.5000000000001,13.5500000000001,13.6000000000001,13.6500000000001,13.7000000000001,13.7500000000001,13.8000000000001,13.8500000000001,13.9000000000001,13.9500000000001,14.0000000000001,14.0500000000001,14.1000000000001,14.1500000000001,14.2000000000001,14.2500000000001,14.3000000000001,14.3500000000001,14.4000000000001,14.4500000000001,14.5000000000001,14.5500000000001,14.6000000000001,14.6500000000001,14.7000000000001,14.7500000000001,14.8000000000001,14.8500000000001,14.9000000000001,14.9500000000001,15.0000000000001,15.0500000000001,15.1000000000001,15.1500000000001,15.2000000000001,15.2500000000001,15.3000000000001,15.3500000000001,15.4000000000001,15.4500000000001,15.5000000000001,15.5500000000001,15.6000000000001,15.6500000000001,15.7000000000001,15.7500000000001,15.8000000000001,15.8500000000001,15.9000000000001,15.9500000000001,16.0000000000001};
		double[] givenForwards3M = {0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016045096143995,0.016089467276045,0.016134454673818,0.016179442071591,0.016224429469364,0.016269416867137,0.01631440426491,0.016359391662683,0.016404379060456,0.016449366458229,0.016494353856002,0.016539341253775,0.016584328651548,0.016629316049321,0.016674303447094,0.016719290844867,0.01676427824264,0.016809265640413,0.016854253038186,0.016899240435959,0.016944227833732,0.017256666219645,0.017572819202616,0.017888972185586,0.018205125168556,0.018521278151527,0.018837431134497,0.019153584117467,0.019469737100437,0.019785890083408,0.020102043066378,0.020418196049348,0.020734349032319,0.021050502015289,0.021366654998259,0.02168280798123,0.0219989609642,0.02231511394717,0.022631266930141,0.022947419913111,0.023263572896081,0.023533194193344,0.023802169217194,0.024071144241044,0.024340119264894,0.024609094288744,0.024878069312594,0.025147044336443,0.025416019360293,0.025684994384143,0.025953969407993,0.026222944431843,0.026491919455693,0.026760894479543,0.027029869503393,0.027298844527243,0.027567819551093,0.027836794574943,0.028105769598793,0.028374744622643,0.028643719646493,0.028837547742447,0.029020808301666,0.029204068860885,0.029387329420105,0.029570589979324,0.029753850538543,0.029937111097762,0.030120371656981,0.0303036322162,0.030486892775419,0.030670153334639,0.030853413893858,0.031036674453077,0.031219935012296,0.031403195571515,0.031586456130734,0.031769716689954,0.031952977249173,0.032136237808392,0.032319498367611,0.032460094623475,0.032597553798211,0.032735012972946,0.032872472147682,0.033009931322417,0.033147390497152,0.033284849671888,0.033422308846623,0.033559768021359,0.033697227196094,0.03383468637083,0.033972145545565,0.0341096047203,0.034247063895036,0.034384523069771,0.034521982244507,0.034659441419242,0.034796900593977,0.034934359768713,0.035071818943448,0.035167788791109,0.035260707952955,0.035353627114802,0.035446546276648,0.035539465438494,0.035632384600341,0.035725303762187,0.035818222924033,0.03591114208588,0.036004061247726,0.036096980409572,0.036189899571419,0.036282818733265,0.036375737895111,0.036468657056958,0.036561576218804,0.03665449538065,0.036747414542497,0.036840333704343,0.036933252866189,0.03697660149102,0.037016305223422,0.037056008955824,0.037095712688227,0.037135416420629,0.037175120153032,0.037214823885434,0.037254527617836,0.037294231350239,0.037333935082641,0.037373638815044,0.037413342547446,0.037453046279848,0.037492750012251,0.037532453744653,0.037572157477056,0.037611861209458,0.03765156494186,0.037691268674263,0.037730972406665,0.037775477217571,0.037820335048954,0.037865192880338,0.037910050711722,0.037954908543105,0.037999766374489,0.038044624205873,0.038089482037256,0.03813433986864,0.038179197700023,0.038224055531407,0.038268913362791,0.038313771194174,0.038358629025558,0.038403486856942,0.038448344688325,0.038493202519709,0.038538060351093,0.038582918182476,0.03862777601386,0.038724139568372,0.038836138788835,0.038948138009297,0.039060137229759,0.039172136450222,0.039284135670684,0.039396134891146,0.039508134111609,0.039620133332071,0.039732132552534,0.039844131772996,0.039956130993458,0.040068130213921,0.040180129434383,0.040292128654845,0.040404127875308,0.04051612709577,0.040628126316232,0.040740125536695,0.040852124757157,0.04089687017863,0.040927043943654,0.040957217708679,0.040987391473703,0.041017565238728,0.041047739003752,0.041077912768777,0.041108086533801,0.041138260298826,0.04116843406385,0.041198607828875,0.0412287815939,0.041258955358924,0.041289129123949,0.041319302888973,0.041349476653998,0.041379650419022,0.041409824184047,0.041439997949071,0.041470171714096,0.041487444617268,0.041502903336742,0.041518362056216,0.041533820775691,0.041549279495165,0.041564738214639,0.041580196934113,0.041595655653587,0.041611114373061,0.041626573092536,0.04164203181201,0.041657490531484,0.041672949250958,0.041688407970432,0.041703866689906,0.04171932540938,0.041734784128855,0.041750242848329,0.041765701567803,0.041781160287277,0.04182426153708,0.041871250017711,0.041918238498342,0.041965226978973,0.042012215459603,0.042059203940234,0.042106192420865,0.042153180901496,0.042200169382127,0.042247157862757,0.042294146343388,0.042341134824019,0.04238812330465,0.04243511178528,0.042482100265911,0.042529088746542,0.042576077227173,0.042623065707803,0.042670054188434,0.042717042669065,0.042662916297475,0.042586881707904,0.042510847118333,0.042434812528763,0.042358777939191,0.042282743349621,0.04220670876005,0.042130674170479,0.042054639580908,0.041978604991337,0.041902570401766,0.041826535812195,0.041750501222624,0.041674466633053,0.041598432043482,0.041522397453912,0.041446362864341,0.04137032827477,0.041294293685199,0.041218259095628,0.041160766579576,0.041107291512787,0.041053816445998,0.041000341379209,0.04094686631242,0.040893391245632,0.040839916178843,0.040786441112054,0.040732966045265,0.040679490978476,0.040626015911687,0.040572540844898,0.040519065778109,0.04046559071132,0.040412115644531,0.040358640577742,0.040305165510953,0.040251690444164,0.040198215377375,0.040144740310586,0.040066350192167,0.039977898225974,0.039889446259781,0.039800994293588,0.039712542327395,0.039624090361203,0.03953563839501,0.039447186428817,0.039358734462624,0.039270282496432,0.039181830530239,0.039093378564046,0.039004926597853,0.03891647463166,0.038828022665468,0.038739570699275,0.038651118733082,0.038562666766889,0.038474214800697,0.038385762834504,0.038271525382485,0.038149460193697,0.038027395004909,0.037905329816121,0.037783264627333}; 
		ForwardCurve forwardEUR3M = ForwardCurveInterpolation.createForwardCurveFromForwards("forward-EUR-3M",timePoints3M, givenForwards3M, 0.25);
		
		double[] timePoints6M = {0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,1.35,1.4,1.45,1.5,1.55,1.6,1.65,1.7,1.75,1.8,1.85,1.9,1.95,2,2.05,2.1,2.15,2.2,2.25,2.3,2.35,2.4,2.45,2.5,2.55,2.6,2.65,2.7,2.75,2.8,2.85,2.9,2.95,3,3.05,3.1,3.15,3.2,3.25,3.3,3.35,3.4,3.45,3.5,3.55,3.6,3.64999999999999,3.69999999999999,3.74999999999999,3.79999999999999,3.84999999999999,3.89999999999999,3.94999999999999,3.99999999999999,4.04999999999999,4.09999999999999,4.14999999999999,4.19999999999999,4.24999999999999,4.29999999999999,4.34999999999999,4.39999999999999,4.44999999999999,4.49999999999999,4.54999999999999,4.59999999999999,4.64999999999999,4.69999999999999,4.74999999999999,4.79999999999999,4.84999999999999,4.89999999999999,4.94999999999999,4.99999999999999,5.04999999999999,5.09999999999999,5.14999999999999,5.19999999999999,5.24999999999999,5.29999999999999,5.34999999999999,5.39999999999999,5.44999999999999,5.49999999999999,5.54999999999999,5.59999999999999,5.64999999999999,5.69999999999999,5.74999999999999,5.79999999999999,5.84999999999999,5.89999999999999,5.94999999999999,5.99999999999999,6.04999999999999,6.09999999999999,6.14999999999999,6.19999999999999,6.24999999999999,6.29999999999999,6.34999999999999,6.39999999999999,6.44999999999999,6.49999999999999,6.54999999999999,6.59999999999998,6.64999999999998,6.69999999999998,6.74999999999998,6.79999999999998,6.84999999999998,6.89999999999998,6.94999999999998,6.99999999999998,7.04999999999998,7.09999999999998,7.14999999999998,7.19999999999998,7.24999999999998,7.29999999999998,7.34999999999998,7.39999999999998,7.44999999999998,7.49999999999998,7.54999999999998,7.59999999999998,7.64999999999998,7.69999999999998,7.74999999999998,7.79999999999998,7.84999999999998,7.89999999999998,7.94999999999998,7.99999999999998,8.04999999999998,8.09999999999998,8.14999999999998,8.19999999999998,8.24999999999998,8.29999999999998,8.34999999999998,8.39999999999998,8.44999999999999,8.49999999999999,8.54999999999999,8.59999999999999,8.64999999999999,8.69999999999999,8.74999999999999,8.79999999999999,8.84999999999999,8.89999999999999,8.94999999999999,9,9.04999999999999,9.09999999999999,9.15,9.2,9.25,9.3,9.35,9.4,9.45,9.5,9.55,9.6,9.65,9.7,9.75,9.8,9.85000000000001,9.90000000000001,9.95000000000001,10,10.05,10.1,10.15,10.2,10.25,10.3,10.35,10.4,10.45,10.5,10.55,10.6,10.65,10.7,10.75,10.8,10.85,10.9,10.95,11,11.05,11.1,11.15,11.2,11.25,11.3,11.35,11.4,11.45,11.5,11.55,11.6,11.65,11.7,11.75,11.8,11.85,11.9,11.95,12,12.05,12.1,12.15,12.2,12.25,12.3,12.35,12.4,12.45,12.5,12.55,12.6,12.65,12.7,12.75,12.8,12.85,12.9000000000001,12.95,13.0000000000001,13.0500000000001,13.1000000000001,13.1500000000001,13.2000000000001,13.2500000000001,13.3000000000001,13.3500000000001,13.4000000000001,13.4500000000001,13.5000000000001,13.5500000000001,13.6000000000001,13.6500000000001,13.7000000000001,13.7500000000001,13.8000000000001,13.8500000000001,13.9000000000001,13.9500000000001,14.0000000000001,14.0500000000001,14.1000000000001,14.1500000000001,14.2000000000001,14.2500000000001,14.3000000000001,14.3500000000001,14.4000000000001,14.4500000000001,14.5000000000001,14.5500000000001,14.6000000000001,14.6500000000001,14.7000000000001,14.7500000000001,14.8000000000001,14.8500000000001,14.9000000000001,14.9500000000001,15.0000000000001,15.0500000000001,15.1000000000001,15.1500000000001,15.2000000000001,15.2500000000001,15.3000000000001,15.3500000000001,15.4000000000001,15.4500000000001,15.5000000000001,15.5500000000001,15.6000000000001,15.6500000000001,15.7000000000001,15.7500000000001,15.8000000000001,15.8500000000001,15.9000000000001,15.9500000000001,16.0000000000001};
		double[] givenTimePoints6M = {0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017982739689417,0.017991487651503,0.018001019013178,0.018010550374853,0.018020081736528,0.018029613098203,0.018039144459878,0.018048675821553,0.018058207183228,0.018067738544903,0.018077269906578,0.018086801268254,0.018096332629929,0.018105863991604,0.018115395353279,0.018124926714954,0.018134458076629,0.018143989438304,0.018153520799979,0.018163052161654,0.018172583523329,0.018387838745029,0.018670421775464,0.018953004805899,0.019235587836334,0.019518170866769,0.019800753897205,0.02008333692764,0.020365919958075,0.02064850298851,0.020931086018945,0.02121366904938,0.021496252079815,0.02177883511025,0.022061418140685,0.02234400117112,0.022626584201555,0.02290916723199,0.023191750262426,0.023474333292861,0.023756916323296,0.024040661538368,0.024324682526066,0.024608703513764,0.024892724501463,0.025176745489161,0.025460766476859,0.025744787464557,0.026028808452255,0.026312829439953,0.026596850427651,0.02688087141535,0.027164892403048,0.027448913390746,0.027732934378444,0.028016955366142,0.02830097635384,0.028584997341538,0.028869018329237,0.029153039316935,0.029437060304633,0.029632517855636,0.029813917718276,0.029995317580915,0.030176717443554,0.030358117306193,0.030539517168832,0.030720917031472,0.030902316894111,0.03108371675675,0.031265116619389,0.031446516482029,0.031627916344668,0.031809316207307,0.031990716069946,0.032172115932586,0.032353515795225,0.032534915657864,0.032716315520503,0.032897715383142,0.033079115245782,0.033235857963093,0.033388686847812,0.033541515732531,0.03369434461725,0.033847173501969,0.034000002386688,0.034152831271408,0.034305660156127,0.034458489040846,0.034611317925565,0.034764146810284,0.034916975695003,0.035069804579722,0.035222633464442,0.035375462349161,0.03552829123388,0.035681120118599,0.035833949003318,0.035986777888037,0.036139606772757,0.036233426792008,0.03631324470759,0.036393062623171,0.036472880538753,0.036552698454334,0.036632516369915,0.036712334285497,0.036792152201078,0.03687197011666,0.036951788032241,0.037031605947823,0.037111423863404,0.037191241778985,0.037271059694567,0.037350877610148,0.03743069552573,0.037510513441311,0.037590331356893,0.037670149272474,0.037749967188056,0.037806038628457,0.037856475312035,0.037906911995614,0.037957348679193,0.038007785362771,0.03805822204635,0.038108658729929,0.038159095413507,0.038209532097086,0.038259968780665,0.038310405464243,0.038360842147822,0.0384112788314,0.038461715514979,0.038512152198558,0.038562588882136,0.038613025565715,0.038663462249294,0.038713898932872,0.038764335616451,0.038802744375326,0.038835964617662,0.038869184859999,0.038902405102335,0.038935625344671,0.038968845587008,0.039002065829344,0.03903528607168,0.039068506314017,0.039101726556353,0.039134946798689,0.039168167041026,0.039201387283362,0.039234607525698,0.039267827768035,0.039301048010371,0.039334268252707,0.039367488495044,0.03940070873738,0.039433928979716,0.03950958527155,0.039599129725037,0.039688674178525,0.039778218632012,0.039867763085499,0.039957307538987,0.040046851992474,0.040136396445961,0.040225940899448,0.040315485352936,0.040405029806423,0.04049457425991,0.040584118713398,0.040673663166885,0.040763207620372,0.04085275207386,0.040942296527347,0.041031840980834,0.041121385434321,0.041210929887809,0.041279611738901,0.04134146582921,0.041403319919518,0.041465174009827,0.041527028100135,0.041588882190444,0.041650736280752,0.041712590371061,0.041774444461369,0.041836298551678,0.041898152641986,0.041960006732295,0.042021860822603,0.042083714912912,0.04214556900322,0.042207423093529,0.042269277183837,0.042331131274145,0.042392985364454,0.042454839454762,0.042470779030473,0.04247169203777,0.042472605045067,0.042473518052364,0.042474431059661,0.042475344066958,0.042476257074254,0.042477170081551,0.042478083088848,0.042478996096145,0.042479909103442,0.042480822110739,0.042481735118036,0.042482648125333,0.04248356113263,0.042484474139926,0.042485387147223,0.04248630015452,0.042487213161817,0.042488126169114,0.042518320361695,0.042558097487642,0.042597874613589,0.042637651739536,0.042677428865483,0.04271720599143,0.042756983117377,0.042796760243324,0.042836537369271,0.042876314495218,0.042916091621165,0.042955868747112,0.042995645873059,0.043035422999006,0.043075200124953,0.0431149772509,0.043154754376847,0.043194531502795,0.043234308628742,0.043274085754689,0.04323887889276,0.043179131816618,0.043119384740476,0.043059637664334,0.042999890588192,0.042940143512051,0.042880396435909,0.042820649359766,0.042760902283625,0.042701155207483,0.042641408131341,0.042581661055199,0.042521913979057,0.042462166902915,0.042402419826773,0.042342672750631,0.042282925674489,0.042223178598347,0.042163431522205,0.042103684446063,0.04203731793224,0.041967289601829,0.041897261271417,0.041827232941005,0.041757204610593,0.041687176280182,0.04161714794977,0.041547119619358,0.041477091288946,0.041407062958534,0.041337034628123,0.041267006297711,0.041196977967299,0.041126949636887,0.041056921306476,0.040986892976064,0.040916864645652,0.04084683631524,0.040776807984828,0.040706779654417,0.040636811194192,0.040566868560324,0.040496925926455,0.040426983292586,0.040357040658717,0.040287098024848,0.040217155390979,0.04014721275711,0.040077270123241,0.040007327489372,0.039937384855504,0.039867442221635,0.039797499587766,0.039727556953897,0.039657614320028,0.039587671686159,0.03951772905229,0.039447786418421,0.039377843784552,0.039307901150684,0.039197291723704,0.039069139758521,0.038940987793337,0.038812835828153,0.03868468386297,0.038556531897786,0.038428379932602,0.038300227967419,0.038172076002235,0.038043924037052};
		ForwardCurve forwardEUR6M = ForwardCurveInterpolation.createForwardCurveFromForwards("forward-EUR-6M",timePoints6M, givenTimePoints6M, 0.5);
		
		int threads = Runtime.getRuntime().availableProcessors();
		System.out.println("Available processors to the Java Virtual Machine " +threads);
		/*
		 * Get the calibrated model
		 */
		AnalyticModel calibratedModel = new AnalyticModelFromCurvesAndVols(new Curve[] {discountEUROIS,forwardEUR3M,forwardEUR6M});
		double t = 0.0;
		for(int i = 0; i<= 200; i++){
			double time = t + 0.25 * i;
			System.out.println(time + "\t" + calibratedModel.getCurve("discount-EUR-OIS").getValue(time)
					+ "\t" +calibratedModel.getCurve("forward-EUR-3M").getValue(time)
					+ "\t" +calibratedModel.getCurve("forward-EUR-6M").getValue(time));
		}
		
		
		double[] strikes = {0,0.005,0.01,0.015,0.02,0.025,0.03,0.035,0.04,0.045,0.05,0.055,0.06};
		
	
		double[][] volatilities = 
			{{0.022705311244774,0.030114930021804,0.010724633841729,0.01406221244071,0.016252126330223,0.018094024234168,0.019832136772842,0.021609422062634,0.023532569235399,0.025673323909511,0.028060830363294,0.027786058625478,0.029138850348355},
					{0.018921092703978,0.02509577501817,0.011625099047335,0.01414193562034,0.01602394090519,0.017610368407189,0.01903122557772,0.020356228348746,0.021631355163359,0.022891652083791,0.024171459410992,0.023155048854565,0.024282375290296},
					{0.016453124090416,0.021822413059278,0.009378205026443,0.010231526717293,0.010996011386339,0.011440464512367,0.011986479214095,0.012604816793423,0.013257489589941,0.013995876041171,0.014734262488783,0.01548832699302,0.016242391498526},
					{0.015752052743846,0.018278398416923,0.009269492931327,0.008200079987897,0.010443855664713,0.010977050142849,0.011284471106816,0.011702180712746,0.012209805263981,0.012822386660273,0.013434968055158,0.014137635131376,0.014840302207595},
					{0.014585081216128,0.017271220577571,0.007360389146852,0.009106099234075,0.010458837299613,0.010479259480481,0.01057291215733,0.01080079331081,0.011178527231243,0.011668019177536,0.012157511124663,0.012784790816277,0.013412070505766},
					{0.014256634133249,0.016942782479934,0.009860389728672,0.009523549539998,0.009957563998463,0.009730816636196,0.010109549845904,0.010175737186688,0.010439601022634,0.010836242749691,0.011232884473955,0.011778924554637,0.012324964635192},
					{0.013553356642119,0.016470370920953,0.009726458945543,0.009514240427305,0.009440611905434,0.009452480541223,0.009588199035447,0.009559466993661,0.009711851464964,0.01003106466543,0.010350277865954,0.010860223369525,0.011370168872657},
					{0.012884966936841,0.015695555614576,0.009254552935152,0.009147286176424,0.009219071863118,0.009238618805729,0.009317912632653,0.009293308567555,0.009077528313325,0.00939894972234,0.009720371131348,0.010118174231806,0.010515977332268},
					{0.012240110811731,0.015001151657186,0.009011818103561,0.009176739814142,0.009199906268761,0.009197510657013,0.008682418644732,0.008632133350904,0.008723825834788,0.008946678219019,0.009169530603297,0.009607044193286,0.010044557783275},
					{0.011810260101925,0.014210248167182,0.008851156651552,0.008692997800787,0.008848459986944,0.008762822179774,0.008818711471726,0.008310363633825,0.008780342146752,0.0088079703795,0.008835598612834,0.009189689593305,0.0095437805738},
					{0.011499944098326,0.013825563910705,0.008521039850145,0.008152741297263,0.008275691399816,0.008206228651221,0.008886159357246,0.008505701419041,0.008629303490802,0.008627903743841,0.00862650399704,0.008846577316381,0.009066650635686}};
		
		double[] maturities = {0.5,1,2,3,4,5,6,7,8,9,10};
		
		int[] indeces = {0,1,2,3,4,5,6,7,8,9}; //chose the index of the maturities we want to calibrate
		int[] strikeIndeces = {1,2,3,4,5,6,7,8}; //choose the index of the strikes we want to calibrate
		
		double[] calibratedStrikes = new double[strikeIndeces.length];
		
		for(int j = 0; j <strikeIndeces.length; j++) {
			calibratedStrikes[j] = strikes[strikeIndeces[j]];
		}
		
		
		//Target caplet data
		QuotingConvention convention = QuotingConvention.VOLATILITYNORMAL;
		
		ArrayList<CapletSmileData> smiles = new ArrayList<CapletSmileData>();
		
		for(int i = 0; i<indeces.length; i++) {
			int index = indeces[i];
			double[] values = new double[strikeIndeces.length];
			
			for(int j = 0; j <strikeIndeces.length; j++) {
				values[j] = volatilities[index][strikeIndeces[j]];
			}
			
			double time = maturities[index];
			
			String forwardCurve;
			
			if(time < 2.0) {
				forwardCurve = "forward-EUR-3M";
			}else {
				forwardCurve = "forward-EUR-6M";
			}
			
			CapletSmileData ithSmile = new CapletSmileData(forwardCurve,"discount-EUR-OIS",referenceDate,calibratedStrikes,time, values, convention);
			smiles.add(ithSmile);
		}
		
		CapletSmileData[] smileArray = new CapletSmileData[smiles.size()];
		smileArray = smiles.toArray(new CapletSmileData[smiles.size()]);
		
		CapletSurfaceData surface =  new CapletSurfaceData(smileArray, calibratedModel);
		
		OptimizerFactoryInterface optimizerFactory = new OptimizerFactoryLevenbergMarquardt(400 /* maxIterations */, 8 /* maxThreads */);

		
		double[] initialParameters = new double[] {0.1, 0.2,0.1, 0.3,0.1,0.7,0.4,0.6,0.1,0.2,0.1} /* initialParameters */;
		double[] parameterStep = new double[] {0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01, 0.01} /* parameterStep */;
		
		int numberOfPoints = 4096*16;
		double gridSpacing = 0.1;
		net.finmath.interpolation.RationalFunctionInterpolation.InterpolationMethod intMethod = net.finmath.interpolation.RationalFunctionInterpolation.InterpolationMethod.LINEAR;
		net.finmath.interpolation.RationalFunctionInterpolation.ExtrapolationMethod extMethod = net.finmath.interpolation.RationalFunctionInterpolation.ExtrapolationMethod.CONSTANT;
		
		CapletByCarrMadan pricer = new CapletByCarrMadan("forward-EUR-6M", 5.0,strikes,numberOfPoints,gridSpacing,intMethod,extMethod);
		
	
		/*
		 * Parameters here are in the same order
		 * as returned by getParameters in FlowOfTemperedStableCBIProcess0.023723115183172175
		 */
		double b = 0.005420988487355758;//0.3;
		double sigma = 0.009306919401566683;//0.5;
		double eta =  0.05918343595932772;//0.5;
		double zeta = 0.01930691940156668;//0.2;
		double alpha = 1.451773415192259;//1.8;
		double[] initialValues = {0.050146242301942784, 0.10053461761177211};
		double[] immigrationRates = {0.0018881411361648904, 0.0017295892457896203};
		double[] lambda = {1.5, 1.4999999999898943}; //This is mu in the new notation of the paper
		
		double[] tenorLengths = {0.25,0.5};
		String[] tenorNames = {"3M", "6M"};
		
		double timeHorizon = 10.0;		
		int numberOfTimeSteps = 100;
		
		ScalarParameterInformationInterface[] lambdaInfo = 
			{new ScalarParameterInformation(true, new BoundConstraint(1.0,1.5)),
					new ScalarParameterInformation(true, new BoundConstraint(1.0,1.5))};
		ScalarParameterInformationInterface[] immigrationRatesInfo =
			{new ScalarParameterInformation(true, new PositivityConstraint()),
					new ScalarParameterInformation(true, new PositivityConstraint())};
		
		ScalarParameterInformationInterface bInfo = new ScalarParameterInformation(true, new PositivityConstraint());
		ScalarParameterInformationInterface sigmaInfo = new ScalarParameterInformation(true, new PositivityConstraint());
		ScalarParameterInformationInterface etaInfo = new ScalarParameterInformation(true, new PositivityConstraint());
		ScalarParameterInformationInterface zetaInfo = new ScalarParameterInformation(true, new PositivityConstraint());
		ScalarParameterInformationInterface alphaInfo = new ScalarParameterInformation(true, new BoundConstraint(1, 2));
		
		ScalarParameterInformationInterface[] initialValuesInfo = 
			{new ScalarParameterInformation(true, new BoundConstraint(1E-4,0.1)),
					new ScalarParameterInformation(true, new BoundConstraint(1E-3,0.2))};
		
		boolean functionVConstraint = true;
		boolean expMomentConstraint = true;
		
		CBIProcessInterface cbiProcess = new FlowOfTemperedAlphaStableCBIprocess(timeHorizon, numberOfTimeSteps, initialValues, immigrationRates,  b, sigma, 
				 eta,  zeta,  alpha,lambda, 
				lambdaInfo, immigrationRatesInfo, 
				bInfo, sigmaInfo, etaInfo, 
				zetaInfo, alphaInfo, initialValuesInfo,
				functionVConstraint, expMomentConstraint);
		
		CBIDrivenMultiCurveModel model = new CBIDrivenMultiCurveModel(calibratedModel, cbiProcess, tenorLengths, tenorNames);
		
		CapletCalibrationProblem problem = new CapletCalibrationProblem(surface, model, optimizerFactory, pricer,initialParameters,parameterStep,CapletCalibrationProblem.Error.RMSE);
		
		System.out.println("Calibration started");
		
		long startMillis	= System.currentTimeMillis();
		CapletCalibrationProblem.OptimizationResult result = problem.runCalibration();
		long endMillis		= System.currentTimeMillis();
		
		double calculationTime = ((endMillis-startMillis)/1000.0);
		
		System.out.println("Calibration completed in: " +calculationTime + " seconds");
		
		System.out.println("The solver required " + result.getIterations() + " iterations.");
		System.out.println("Calibration error " +result.getCalibrationError());
		
		double[] parameters = result.getModel().getParameters();
		for(int i =0; i<parameters.length; i++) {
			System.out.println(parameters[i]);
		}
		
		ArrayList<String> errorsOverview = result.getCalibrationOutput();
		
		for(String myString : errorsOverview)
			System.out.println(myString);
		
		
		System.out.println("Finished.");
		
	}
}